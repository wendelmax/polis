name: Build Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: 'v1.0.0'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu
    
    - name: Build
      run: |
        export CC_x86_64_unknown_linux_gnu=x86_64-linux-gnu-gcc
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        cargo build --release --target ${{ matrix.target }} --bin polis
    
    - name: Create package
      run: |
        mkdir -p polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}
        cp target/${{ matrix.target }}/release/polis polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}/
        cp installers/linux/install.sh polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}/
        tar -czf polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}.tar.gz polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}
        path: polis-linux-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}.tar.gz

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }} --bin polis
    
    - name: Create package
      run: |
        mkdir -p polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}
        cp target/${{ matrix.target }}/release/polis polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}/
        cp installers/macos/install.sh polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}/
        tar -czf polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}.tar.gz polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}
        path: polis-macos-${{ matrix.target == 'x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}.tar.gz

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-gnu
        override: true
    
    - name: Install cross-compilation dependencies
      run: |
        choco install mingw -y
        $env:PATH += ";C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
    
    - name: Build
      run: |
        $env:CC_x86_64_pc_windows_gnu = "x86_64-w64-mingw32-gcc"
        cargo build --release --target x86_64-pc-windows-gnu --bin polis
    
    - name: Create package
      run: |
        mkdir polis-windows-x86_64
        cp target/x86_64-pc-windows-gnu/release/polis.exe polis-windows-x86_64/
        cp installers/windows/install.ps1 polis-windows-x86_64/
        Compress-Archive -Path polis-windows-x86_64 -DestinationPath polis-windows-x86_64.zip
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: polis-windows-x86_64
        path: polis-windows-x86_64.zip

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create checksums
      run: |
        find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
          sha256sum "$file" > "${file}.sha256"
        done
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          polis-linux-x86_64/polis-linux-x86_64.tar.gz
          polis-linux-x86_64/polis-linux-x86_64.tar.gz.sha256
          polis-linux-aarch64/polis-linux-aarch64.tar.gz
          polis-linux-aarch64/polis-linux-aarch64.tar.gz.sha256
          polis-macos-x86_64/polis-macos-x86_64.tar.gz
          polis-macos-x86_64/polis-macos-x86_64.tar.gz.sha256
          polis-macos-aarch64/polis-macos-aarch64.tar.gz
          polis-macos-aarch64/polis-macos-aarch64.tar.gz.sha256
          polis-windows-x86_64/polis-windows-x86_64.zip
          polis-windows-x86_64/polis-windows-x86_64.zip.sha256
        body: |
          # Polis Container Runtime ${{ github.ref_name }}
          
          ## Downloads
          
          ### Linux
          - **x86_64**: [polis-linux-x86_64.tar.gz](polis-linux-x86_64.tar.gz)
          - **aarch64**: [polis-linux-aarch64.tar.gz](polis-linux-aarch64.tar.gz)
          
          ### macOS
          - **x86_64**: [polis-macos-x86_64.tar.gz](polis-macos-x86_64.tar.gz)
          - **aarch64**: [polis-macos-aarch64.tar.gz](polis-macos-aarch64.tar.gz)
          
          ### Windows
          - **x86_64**: [polis-windows-x86_64.zip](polis-windows-x86_64.zip)
          
          ## Installation
          
          ### Quick Install
          ```bash
          curl -fsSL https://raw.githubusercontent.com/wendelmax/polis/main/installers/scripts/install.sh | bash
          ```
          
          ### Manual Install
          Download the appropriate package for your platform and follow the installation instructions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
